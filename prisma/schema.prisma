generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL_DEPLOY")
}



model AlumnasNomina {
  id_alumno Int    @id @default(autoincrement())
  rut       String @unique @db.VarChar(10)
  nombre    String @db.VarChar(200)
  email     String @db.VarChar(100)
}

model Administrador {
  id            Int          @id @default(autoincrement())
  nombre        String
  correo        String       @unique
  password      String
  tipo_usuario  Tipo_usuario
  primerSesion  Boolean      @default(true)
  creadoEn      DateTime     @default(now())
  actualizadoEn DateTime     @updatedAt
}

model Usuarios {
  id_usuario      Int                   @id @default(autoincrement())
  password        String                @db.VarChar(250)
  correo          String                @unique @db.VarChar(100)
  nombre          String                @db.VarChar(200)
  rut             String                @unique @db.Char(10)
  primerSesion    Boolean               @default(true)
  estado          Boolean               @default(true)
  tipo_usuario    Tipo_usuario
  academico       Academico?
  alumno_practica AlumnosPractica?
  comentarios     comentariosPractica[]
  jefe_alumno     JefesAlumno?

  @@map("usuario")
}

model AlumnosPractica {
  id_user          Int              @id
  primer_practica  Boolean          @default(false)
  segunda_practica Boolean          @default(false)
  informe          InformesAlumno[]
  practica         Practicas[]
  usuario          Usuarios         @relation(fields: [id_user], references: [id_usuario], onDelete: Cascade)

  @@map("alumno_practica")
}

model JefesAlumno {
  id_user         Int                   @id
  cargo           String                @db.VarChar(60)
  id_empresa      Int
  numero_telefono String                @db.VarChar(30)
  informe         InformeConfidencial[]
  practicas       Practicas[]
  empresa         Empresas              @relation(fields: [id_empresa], references: [id_empresa])
  usuario         Usuarios              @relation(fields: [id_user], references: [id_usuario], onDelete: Cascade)

  @@index([id_empresa], map: "jefe_alumno_id_empresa_fkey")
  @@map("jefe_alumno")
}

model Academico {
  id_user              Int                           @id
  informe_confidencial InformeConfidencial[]
  informe_evaluacion   InformeEvaluacionAcademicos[]
  informe_alumno       InformesAlumno[]
  usuario              Usuarios                      @relation(fields: [id_user], references: [id_usuario], onDelete: Cascade)

  @@map("academico")
}

model Empresas {
  id_empresa          Int           @id @default(autoincrement())
  nombre_razon_social String        @db.VarChar(100)
  ubicacion           String        @db.VarChar(100)
  rubro               String?       @db.VarChar(100)
  caracter_empresa    TipoEmpresa?
  tamano_empresa      String?       @db.VarChar(100)
  jefe_supervisor     JefesAlumno[]
}

model Practicas {
  id_practica          Int                  @id @default(autoincrement())
  tipo_practica        TipoPractica
  estado               Estado_practica
  cantidad_horas       Int
  horas_semanales      Int
  fecha_inicio         DateTime
  fecha_termino        DateTime
  modalidad            Modalidad_practica
  id_alumno            Int
  id_supervisor        Int
  informe_confidencial InformeConfidencial?
  informe_alumno       InformesAlumno?
  alumno               AlumnosPractica      @relation(fields: [id_alumno], references: [id_user])
  jefe_supervisor      JefesAlumno          @relation(fields: [id_supervisor], references: [id_user])

  @@index([id_alumno], map: "Practicas_id_alumno_fkey")
  @@index([id_supervisor], map: "Practicas_id_supervisor_fkey")
}

model InformesAlumno {
  id_informe             Int                          @id @default(autoincrement())
  id_practica            Int                          @unique
  id_alumno              Int
  archivo                String?                      @db.VarChar(300)
  archivo_correccion     String?                      @db.VarChar(300)
  estado                 Estado_informe
  id_academico           Int?
  fecha_inicio           DateTime
  intentos               Int                          @default(3)
  fecha_inicio_revision  DateTime?                    @db.Date
  fecha_termino_revision DateTime?                    @db.Date
  informe_academico      InformeEvaluacionAcademicos?
  academico              Academico?                   @relation(fields: [id_academico], references: [id_user])
  alumno                 AlumnosPractica              @relation(fields: [id_alumno], references: [id_user])
  practica               Practicas                    @relation(fields: [id_practica], references: [id_practica])
  respuestas             RespuestasInformeAlumno[]
  comentarios            comentariosPractica[]

  @@index([id_academico], map: "InformesAlumno_id_academico_fkey")
  @@index([id_alumno], map: "InformesAlumno_id_alumno_fkey")
}

model comentariosPractica {
  comentario String         @db.VarChar(300)
  id_informe Int
  id_usuario Int
  informe    InformesAlumno @relation(fields: [id_informe], references: [id_informe])
  usuario    Usuarios       @relation(fields: [id_usuario], references: [id_usuario])

  @@id([id_informe, id_usuario])
  @@index([id_usuario], map: "comentariosPractica_id_usuario_fkey")
}

model RespuestasInformeAlumno {
  id_informe  Int
  id_pregunta Int
  texto       String?                             @db.VarChar(300)
  puntaje     Int?
  nota        Decimal?                            @db.Decimal(5, 1)
  asignaturas AsignaturasEnRespuestasInforme[]
  informe     InformesAlumno                      @relation(fields: [id_informe], references: [id_informe], onDelete: Cascade)
  pregunta    PreguntasImplementadasInformeAlumno @relation(fields: [id_pregunta], references: [id_pregunta])

  @@id([id_informe, id_pregunta])
  @@index([id_pregunta], map: "RespuestasInformeAlumno_id_pregunta_fkey")
}

model AsignaturasEnRespuestasInforme {
  id_informe        Int
  id_pregunta       Int
  nombre_asignatura String
  respuesta         RespuestasInformeAlumno @relation(fields: [id_informe, id_pregunta], references: [id_informe, id_pregunta], onDelete: Cascade)
  asignatura        Asignaturas             @relation(fields: [nombre_asignatura], references: [nombre])

  @@id([id_informe, id_pregunta, nombre_asignatura])
  @@index([nombre_asignatura], map: "AsignaturasEnRespuestasInforme_nombre_asignatura_fkey")
}

model InformeConfidencial {
  id_informe_confidencial         Int                             @id @default(autoincrement())
  horas_practicas_regulares       Int?
  horas_practicas_extraordinarias Int?
  total_horas                     Int?
  horas_semanales                 Int?
  horas_inasistencia              Int?
  nota_evaluacion                 Decimal?                        @db.Decimal(5, 1)
  fecha_inicio                    DateTime
  fecha_envio                     DateTime?
  estado                          Estado_informe
  fecha_inicio_revision           DateTime?                       @db.Date
  fecha_termino_revision          DateTime?                       @db.Date
  fecha_inicio_practica           DateTime?                       @db.Date
  fecha_fin_practica              DateTime?                       @db.Date
  fecha_real_revision             DateTime?                       @db.Date
  id_supervisor                   Int
  id_alumno_evaluado              Int
  id_practica                     Int                             @unique
  id_academico                    Int?
  academico                       Academico?                      @relation(fields: [id_academico], references: [id_user])
  practica                        Practicas                       @relation(fields: [id_practica], references: [id_practica])
  supervisor                      JefesAlumno                     @relation(fields: [id_supervisor], references: [id_user])
  informe_academico               InformeEvaluacionAcademicos?    
  respuestas                      RespuestasInformeConfidencial[]

  @@index([id_academico], map: "InformeConfidencial_id_academico_fkey")
  @@index([id_supervisor], map: "InformeConfidencial_id_supervisor_fkey")
}

model InformeEvaluacionAcademicos {
  id_informe              Int                           @id @default(autoincrement())
  id_academico            Int
  id_informe_alumno       Int?                          @unique
  id_informe_confidencial Int                           @unique
  fecha_revision          DateTime                      @db.Date
  academico               Academico                     @relation(fields: [id_academico], references: [id_user])
  informe_alumno          InformesAlumno?               @relation(fields: [id_informe_alumno], references: [id_informe])
  informe_confidencial    InformeConfidencial           @relation(fields: [id_informe_confidencial], references: [id_informe_confidencial])
  respuestas              RespuestasInformeEvaluacion[]

  @@index([id_academico], map: "InformeEvaluacionAcademicos_id_academico_fkey")
}

model PreguntasImplementadasInformeEvaluacion {
  id_pregunta Int                           @id
  pregunta    Preguntas                     @relation(fields: [id_pregunta], references: [id_pregunta])
  respuestas  RespuestasInformeEvaluacion[]
}

model RespuestasInformeEvaluacion {
  respuesta_texto       String?                                 @db.VarChar(300)
  puntos                Int?
  pregunta_id           Int
  informe_id            Int
  informe_evaluacion    InformeEvaluacionAcademicos             @relation(fields: [informe_id], references: [id_informe])
  pregunta_implementada PreguntasImplementadasInformeEvaluacion @relation(fields: [pregunta_id], references: [id_pregunta])

  @@id([pregunta_id, informe_id])
  @@index([informe_id], map: "RespuestasInformeEvaluacion_informe_id_fkey")
}

model PreguntasImplementadasInformeAlumno {
  id_pregunta Int                       @id
  preguntas   Preguntas                 @relation(fields: [id_pregunta], references: [id_pregunta])
  respuestas  RespuestasInformeAlumno[]
}

model Preguntas {
  id_pregunta                          Int                                        @id @default(autoincrement())
  enunciado_pregunta                   String                                     @unique @db.VarChar(400)
  tipo_pregunta                        Tipo_pregunta
  id_dimension                         Int
  dimension                            DimensionesEvaluativas                     @relation(fields: [id_dimension], references: [id_dimension])
  preguntas_implementadas_informe      PreguntasImplementadasInformeAlumno?
  preguntas_implementadas_confidencial PreguntasImplementadasInformeConfidencial?
  preguntas_implementadas_evaluacion   PreguntasImplementadasInformeEvaluacion?

  @@index([id_dimension], map: "Preguntas_id_dimension_fkey")
}

model PreguntasImplementadasInformeConfidencial {
  id_pregunta Int                             @id
  pregunta    Preguntas                       @relation(fields: [id_pregunta], references: [id_pregunta])
  respuesta   RespuestasInformeConfidencial[]
}

model RespuestasInformeConfidencial {
  respuesta_texto String?                                   @db.VarChar(300)
  puntos          Int?
  pregunta_id     Int
  informe_id      Int
  informe         InformeConfidencial                       @relation(fields: [informe_id], references: [id_informe_confidencial], onDelete: Cascade)
  pregunta        PreguntasImplementadasInformeConfidencial @relation(fields: [pregunta_id], references: [id_pregunta])

  @@id([pregunta_id, informe_id])
  @@index([informe_id], map: "RespuestasInformeConfidencial_informe_id_fkey")
}

model DimensionesEvaluativas {
  id_dimension    Int         @id @default(autoincrement())
  nombre          String      @db.VarChar(200)
  descripcion     String      @db.VarChar(400)
  lista_preguntas Preguntas[]
}

model Asignaturas {
  nombre          String                           @id @db.VarChar(100)
  tipo_asignatura Tipo_asignatura
  semestre        Decimal                          @db.Decimal(5, 1)
  codigo          String                           @db.VarChar(100)
  respuestas      AsignaturasEnRespuestasInforme[]
}

enum TipoPractica {
  PRACTICA_UNO
  PRACTICA_DOS
}

enum Tipo_usuario {
  JEFE_CARRERA
  ALUMNO_PRACTICA
  JEFE_DEPARTAMENTO
  SECRETARIA_DEPARTAMENTO
  SECRETARIA_CARRERA
  JEFE_EMPLEADOR
  ACADEMICO
  ADMINISTRADOR
}

enum Modalidad_practica {
  PRESENCIAL
  SEMI_PRESENCIAL
  REMOTO
}

enum Tipo_pregunta {
  ABIERTA
  CERRADA
  EVALUATIVA
  DESARROLLO_PROFESIONAL
  REVISION_ACADEMICA
  HABILIDADES_TECNICAS
  VINCULACION_MEDIO
  SALARIO_ESTIMADO
}

enum TipoEmpresa {
  PRIVADA
  PUBLICA
}

enum Estado_informe {
  ENVIADA
  REVISION
  APROBADA
  CORRECCION
  DESAPROBADA
  ESPERA
}

enum Estado_practica {
  CURSANDO
  ESPERA_INFORMES
  REVISION_GENERAL
  FINALIZADA
  INFORMES_RECIBIDOS
}

enum Tipo_asignatura {
  FORMACION_BASICA
  FORMACION_GENERAL
  FORMACION_PROFESIONAL
}
