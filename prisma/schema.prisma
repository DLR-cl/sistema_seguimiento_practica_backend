// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AlumnasNomina {
  id_alumno Int    @id @default(autoincrement())
  rut       String @unique @db.VarChar(10)
  nombre    String @db.VarChar(200)
  email     String @db.VarChar(100)
}

model Administrador {
  id            Int          @id @default(autoincrement())
  nombre        String
  correo        String       @unique
  password      String
  tipo_usuario  Tipo_usuario // puede ser admin, jefe departamento y jefe de usuario
  primerSesion  Boolean     @default(true)
  creadoEn      DateTime     @default(now())
  actualizadoEn DateTime     @updatedAt
}

model Usuarios {
  id_usuario      Int                   @id @default(autoincrement())
  password        String                @db.VarChar(250)
  correo          String                @unique @db.VarChar(100)
  nombre          String                @db.VarChar(200)
  rut             String                @unique @db.Char(10)
  primerSesion    Boolean               @default(true)
  tipo_usuario    Tipo_usuario
  // solo para academicos
  comentarios     comentariosPractica[]
  alumno_practica AlumnosPractica?
  jefe_alumno     JefesAlumno?
  academico       Academico?

  @@map("usuario")
}

model AlumnosPractica {
  id_user          Int     @id
  primer_practica  Boolean @default(false)
  segunda_practica Boolean @default(false)

  usuario  Usuarios         @relation(fields: [id_user], references: [id_usuario], onDelete: Cascade)
  informe  InformesAlumno[]
  practica Practicas[]

  @@map("alumno_practica")
}

model JefesAlumno {
  id_user         Int                   @id
  cargo           String                @db.VarChar(60)
  id_empresa      Int
  numero_telefono String                @db.VarChar(30)
  informe         InformeConfidencial[]
  practicas       Practicas[]

  usuario Usuarios @relation(fields: [id_user], references: [id_usuario], onDelete: Cascade)
  empresa Empresas @relation(fields: [id_empresa], references: [id_empresa])

  @@map("jefe_alumno")
}

model Academico {
  id_user Int      @id
  usuario Usuarios @relation(fields: [id_user], references: [id_usuario], onDelete: Cascade)

  informe_confidencial InformeConfidencial[]
  informe_alumno       InformesAlumno[]
  informe_evaluacion   InformeEvaluacionAcademicos[]

  @@map("academico")
}

model Empresas {
  id_empresa          Int         @id @default(autoincrement())
  nombre_razon_social String      @db.VarChar(100)
  ubicacion           String      @db.VarChar(100)
  rubro               String      @db.VarChar(100)
  caracter_empresa    TipoEmpresa
  tamano_empresa      String      @db.VarChar(100) // nombre y apellido

  jefe_supervisor JefesAlumno[]
}

model Practicas {
  id_practica     Int                @id @default(autoincrement())
  tipo_practica   TipoPractica // uno o dos
  estado          Estado_practica
  // Información dada por la carta
  cantidad_horas  Int
  horas_semanales Int
  fecha_inicio    DateTime
  fecha_termino   DateTime
  modalidad       Modalidad_practica

  // relacion
  id_alumno            Int
  id_supervisor        Int
  informe_alumno       InformesAlumno?
  informe_confidencial InformeConfidencial?
  // relacion con informeAlumno
  alumno               AlumnosPractica      @relation(fields: [id_alumno], references: [id_user])
  jefe_supervisor      JefesAlumno          @relation(fields: [id_supervisor], references: [id_user])
  // relacion con informeConfidencial
  // preguntas PreguntasPracticaAlumno[]
}

model InformesAlumno {
  id_informe         Int            @id @default(autoincrement())
  id_practica        Int            @unique
  id_alumno          Int
  archivo            String?        @db.VarChar(300) //documento con los datos requeridos
  archivo_correccion String?        @db.VarChar(300) //documento correccion
  estado             Estado_informe
  id_academico       Int?
  fecha_inicio       DateTime
  intentos           Int            @default(3)

  fecha_inicio_revision  DateTime? @db.Date
  fecha_termino_revision DateTime? @db.Date

  practica  Practicas       @relation(fields: [id_practica], references: [id_practica])
  alumno    AlumnosPractica @relation(fields: [id_alumno], references: [id_user])
  academico Academico?      @relation(fields: [id_academico], references: [id_user])

  informe_academico InformeEvaluacionAcademicos?
  respuestas        RespuestasInformeAlumno[]
  comentarios       comentariosPractica[]
}

model comentariosPractica {
  comentario String @db.VarChar(300)

  id_informe Int
  id_usuario Int

  informe InformesAlumno @relation(fields: [id_informe], references: [id_informe])
  usuario Usuarios       @relation(fields: [id_usuario], references: [id_usuario])

  @@id([id_informe, id_usuario])
}

model RespuestasInformeAlumno {
  id_informe  Int
  id_pregunta Int
  texto       String?                             @db.VarChar(300)
  puntaje     Int?
  nota        Decimal?                            @db.Decimal(5, 1)
  informe     InformesAlumno                      @relation(fields: [id_informe], references: [id_informe])
  pregunta    PreguntasImplementadasInformeAlumno @relation(fields: [id_pregunta], references: [id_pregunta])
  asignaturas AsignaturasEnRespuestasInforme[]

  @@id([id_informe, id_pregunta])
}

model AsignaturasEnRespuestasInforme {
  id_informe        Int
  id_pregunta       Int
  nombre_asignatura String

  respuesta  RespuestasInformeAlumno @relation(fields: [id_informe, id_pregunta], references: [id_informe, id_pregunta])
  asignatura Asignaturas             @relation(fields: [nombre_asignatura], references: [nombre])

  @@id([id_informe, id_pregunta, nombre_asignatura])
}

model InformeConfidencial {
  id_informe_confidencial Int @id @default(autoincrement())

  // sobre el alumno y la práctica
  horas_practicas_regulares       Int?
  horas_practicas_extraordinarias Int?
  total_horas                     Int?
  horas_semanales                 Int?
  horas_inasistencia              Int?
  nota_evaluacion                 Decimal?       @db.Decimal(5, 1)
  fecha_inicio                    DateTime // no se agregó fecha final 
  // desde la fecha inicio a comparación de la fecha actual se enviará correo
  fecha_envio                     DateTime?
  estado                          Estado_informe
  // tiempos de revision
  fecha_inicio_revision           DateTime?      @db.Date
  fecha_termino_revision          DateTime?      @db.Date
  // añadir fecha final real
  fecha_inicio_practica           DateTime?      @db.Date
  fecha_fin_practica              DateTime?      @db.Date

  fecha_real_revision DateTime? @db.Date
  // relacion
  id_supervisor       Int       @db.Int
  id_alumno_evaluado  Int       @db.Int
  id_practica         Int       @unique
  id_academico        Int?

  informe_academico InformeEvaluacionAcademicos?
  respuestas        RespuestasInformeConfidencial[]

  practica   Practicas   @relation(fields: [id_practica], references: [id_practica])
  academico  Academico?  @relation(fields: [id_academico], references: [id_user])
  supervisor JefesAlumno @relation(fields: [id_supervisor], references: [id_user])
}

// falta algo, si bien se obtienen el puntaje de una pregunta en base a la respuesta, falta obtener el puntaje total de una dimension

model InformeEvaluacionAcademicos {
  id_informe              Int @id @default(autoincrement())
  id_academico            Int
  id_informe_alumno       Int @unique
  id_informe_confidencial Int @unique

  fecha_revision DateTime @db.Date

  academico            Academico                     @relation(fields: [id_academico], references: [id_user])
  informe_alumno       InformesAlumno                @relation(fields: [id_informe_alumno], references: [id_informe])
  informe_confidencial InformeConfidencial           @relation(fields: [id_informe_confidencial], references: [id_informe_confidencial])
  respuestas           RespuestasInformeEvaluacion[]
}

model PreguntasImplementadasInformeEvaluacion {
  id_pregunta Int

  respuestas RespuestasInformeEvaluacion[]
  pregunta   Preguntas                     @relation(fields: [id_pregunta], references: [id_pregunta])

  @@id([id_pregunta])
}

model RespuestasInformeEvaluacion {
  respuesta_texto       String?                                 @db.VarChar(300)
  puntos                Int?
  pregunta_id           Int
  informe_id            Int
  informe_evaluacion    InformeEvaluacionAcademicos             @relation(fields: [informe_id], references: [id_informe])
  pregunta_implementada PreguntasImplementadasInformeEvaluacion @relation(fields: [pregunta_id], references: [id_pregunta])

  @@id([pregunta_id, informe_id])
}

model PreguntasImplementadasInformeAlumno {
  id_pregunta Int

  respuestas RespuestasInformeAlumno[]

  preguntas Preguntas @relation(fields: [id_pregunta], references: [id_pregunta])

  @@id([id_pregunta])
}

model Preguntas {
  id_pregunta        Int           @id @default(autoincrement())
  enunciado_pregunta String        @unique @db.VarChar(400)
  tipo_pregunta      Tipo_pregunta
  id_dimension       Int

  preguntas_implementadas_informe      PreguntasImplementadasInformeAlumno?
  preguntas_implementadas_confidencial PreguntasImplementadasInformeConfidencial?
  preguntas_implementadas_evaluacion   PreguntasImplementadasInformeEvaluacion?

  dimension DimensionesEvaluativas @relation(fields: [id_dimension], references: [id_dimension])
}

model PreguntasImplementadasInformeConfidencial {
  id_pregunta Int
  respuesta   RespuestasInformeConfidencial[]
  pregunta    Preguntas                       @relation(fields: [id_pregunta], references: [id_pregunta])

  @@id([id_pregunta])
}

model RespuestasInformeConfidencial {
  respuesta_texto String?                                   @db.VarChar(300)
  puntos          Int?
  pregunta_id     Int
  informe_id      Int
  informe         InformeConfidencial                       @relation(fields: [informe_id], references: [id_informe_confidencial])
  pregunta        PreguntasImplementadasInformeConfidencial @relation(fields: [pregunta_id], references: [id_pregunta])

  @@id([pregunta_id, informe_id])
}

model DimensionesEvaluativas {
  id_dimension Int    @id @default(autoincrement())
  nombre       String @db.VarChar(200)
  descripcion  String @db.VarChar(400)

  lista_preguntas Preguntas[]
}

model Asignaturas {
  nombre          String          @id @db.VarChar(100)
  tipo_asignatura Tipo_asignatura
  semestre        Decimal         @db.Decimal(5, 1)
  codigo          String          @db.VarChar(100)

  respuestas AsignaturasEnRespuestasInforme[]
}

enum TipoPractica {
  PRACTICA_UNO
  PRACTICA_DOS
}

enum Tipo_usuario {
  JEFE_CARRERA
  ALUMNO_PRACTICA
  JEFE_DEPARTAMENTO
  SECRETARIA
  JEFE_EMPLEADOR
  ACADEMICO
  ADMINISTRADOR
}

enum Modalidad_practica {
  PRESENCIAL
  SEMI_PRESENCIAL
  REMOTO
}

enum Tipo_pregunta {
  ABIERTA
  CERRADA
  EVALUATIVA
  DESARROLLO_PROFESIONAL
  REVISION_ACADEMICA
  HABILIDADES_TECNICAS
  VINCULACION_MEDIO
  SALARIO_ESTIMADO
}

enum TipoEmpresa {
  PRIVADA
  PUBLICA
}

enum Estado_informe {
  ENVIADA
  REVISION
  APROBADA
  CORRECCION
  DESAPROBADA
  ESPERA
}

enum Estado_practica {
  CURSANDO
  ESPERA_INFORMES
  REVISION_GENERAL
  FINALIZADA
  INFORMES_RECIBIDOS
}

enum Tipo_asignatura {
  FORMACION_BASICA
  FORMACION_GENERAL
  FORMACION_PROFESIONAL
}

enum Calificacion {
  TOTAL
  REGULAR
  SUFICIENTE
  DEFICIENTE
}
